cmake_minimum_required(VERSION 3.12)
project(ram_mpc_dt)
SET(CMAKE_BUILD_TYPE "Debug")  
set(CMAKE_CXX_STANDARD 11)
#SET(CMAKE_CXX_FLAGS_DEBUG "$ENV{CXXFLAGS} -Wall -g2 -ggdb -g -O2")
SET(CMAKE_CXX_FLAGS_DEBUG "$ENV{CXXFLAGS} -Wall -g2 -ggdb -fsanitize=address -fno-omit-frame-pointer -g -O2")   
SET(CMAKE_CXX_FLAGS_RELEASE "$ENV{CXXFLAGS} -O3 -Wall")  
SET(CMAKE_EXE_LINKER_FLAGS 
          "${CMAKE_EXE_LINKER_FLAGS} -Wl,-rpath -Wl,/usr/local/lib")
add_definitions( -DREDUCE_FSS -DNEED_MUL -DNEED_CMOV -DTotal_bitwise)

find_package(OpenSSL REQUIRED)
find_path(GMP_INCLUDE_DIR NAMES gmp.h)
find_library(GMP_LIBRARIES NAMES gmp libgmp)
find_library(GMPXX_LIBRARIES NAMES gmpxx libgmpxx)
find_package(OpenMP REQUIRED)
if(OPENMP_FOUND)
    message("OPENMP FOUND")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}")
endif()
if( OPENSSL_FOUND )
    include_directories(${OPENSSL_INCLUDE_DIRS})
    message("Using OpenSSL ${OPENSSL_VERSION}")
else()
    message("can't find Openssl")
endif()

include(cmake/utils.cmake)
include(cmake/log.cmake)
include(cmake/json.cmake)
include(cmake/emp.cmake)
include(cmake/empot.cmake)
include_directories(include)

include_directories(fss/include)
add_library(fss fss/fss-client.cpp
                fss/fss-common.cpp
                fss/fss-server.cpp)
include_directories(protocol)
include_directories(protocol/3_parties)
add_library(risc protocol/src/risc.cpp
                protocol/src/convert.cpp)
add_library(gc protocol/src/gc_op.cpp)
add_library(fss_mpc include/fss_mpc.cpp)
target_link_libraries(gc ${OPENSSL_LIBRARIES} emp-tool emp empot)
target_link_libraries(fss gmp gmpxx ${OPENSSL_LIBRARIES})
target_link_libraries(risc fss gc)
add_executable(test src/Test_ram.cpp)
add_executable(test_gc src/Test_gc.cpp)
add_executable(test_prf src/Test_prf.cpp)
add_executable(ORAM_TEST src/oram_rw_test.cpp)
add_executable(test_risc src/Test_risc.cpp)
add_executable(test_thr src/Test_3_parties.cpp)
target_link_libraries(test PRIVATE risc log)
target_link_libraries(ORAM_TEST PRIVATE risc log)
target_link_libraries(test_risc PRIVATE risc log)
target_link_libraries(test_prf PRIVATE fss gc log fss_mpc)
target_link_libraries(test_gc PRIVATE gc log emp-tool emp empot)
target_link_libraries(test_thr PRIVATE fss log)